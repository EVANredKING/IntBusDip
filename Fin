1.	Теоретическое обоснование разработки программного продукта 
1.1	Моделирование проектируемой системы
Система ATOM представляет собой веб-приложение на базе Django для управления номенклатурой и логической структурой изделий (ЛСИ). ATOM является аналогом системы DipMain с основными функциями для работы с данными о номенклатуре и структуре изделий.
 
Рисунок 1.1 – Контекстная диаграмма IDEF0

 
1.2	Разработка функциональных требований к системе

1.2.1	Функциональное назначение
Разрабатываемая программная система представляет собой комплексное решение для управления номенклатурой в организации. Основное назначение системы заключается в автоматизации процессов учета и контроля номенклатуры изделий. Система обеспечивает:
1)	Централизованное хранение информации:
   - полные данные о номенклатуре (наименование, коды, аббревиатуры, чертежные номера);
   - информация о логической структуре изделий (ЛСИ);
   - история изменений номенклатуры.
2)	Разграничение прав доступа:
   - система аутентификации пользователей;
   - авторизация через API.
3)	Формирование отчетной документации:
   - экспорт данных в Excel;
   - импорт данных из Excel.
4)	Интеграционные возможности:
   - подключение к серверу IntBus через API;
   - синхронизация данных между системами.
  
1.2.2	Эксплуатационное назначение
Программный продукт предназначен для ежедневного использования в рабочих процессах организации. Основные аспекты эксплуатации:
1)	Режим работы:
   - круглосуточная доступность системы;
   - обработка запросов через веб-интерфейс.
2)	Пользовательские группы:
   - администраторы системы:
     o полный контроль над номенклатурой;
     o управление учетными записями;
     o настройка интеграции с внешними системами.
   - обычные пользователи:
     o просмотр и редактирование номенклатуры;
     o работа с логической структурой изделий;
     o формирование отчетов.
3)	Результаты работы системы:
   - актуальная база данных номенклатуры изделий;
   - структурированная информация о ЛСИ;
   - возможность экспорта и импорта данных.
  
1.2.3	Требования к функциональным характеристикам
1)	Управление пользователями:
   - регистрация новых пользователей;
   - аутентификация через логин и пароль;
   - восстановление доступа при утере учетных данных.
2)	Управление номенклатурой:
   - создание карточек номенклатуры с указанием:
     o полного и краткого наименования;
     o кодов (внутренний, ЕКПС, КВТ);
     o чертежного номера;
     o шифра и других атрибутов.
   - редактирование существующих записей;
   - удаление (или пометка на удаление) записей.
3)	Работа с ЛСИ:
   - создание структуры изделий;
   - указание шифров, кодов и количества;
   - определение иерархических связей.
4)	Обмен данными:
   - экспорт номенклатуры и ЛСИ в Excel;
   - импорт данных из Excel;
   - отправка данных в систему IntBus.
  
1.2.4	Входные и выходные данные
1)	Источники входных данных:
   - ручной ввод через веб-интерфейс;
   - загрузка из файлов Excel;
   - получение данных от системы IntBus через API.
2)	Типы выходных данных:
   - веб-страницы с информацией о номенклатуре и ЛСИ;
   - файлы Excel с экспортированными данными;
   - XML-данные для передачи в IntBus.
3)	Форматы данных:
   - внутренний формат SQLite для хранения;
   - Excel для импорта/экспорта;
   - XML для обмена с другими системами.
  
1.2.5	Требования к надежности
1)	Обеспечение бесперебойной работы:
   - обработка ошибок ввода данных;
   - логирование действий пользователей;
   - контроль корректности данных.
2)	Защита данных:
   - аутентификация и авторизация пользователей;
   - защита от несанкционированного доступа;
   - резервное копирование базы данных.
3)	Производительность:
   - оптимизированные запросы к базе данных;
   - быстрая загрузка и отображение данных;
   - эффективная обработка запросов.
 
1.2.6	Требования к техническим средствам
1)	Серверная часть:
   - аппаратные требования:
     o процессор: 2+ ядер, 2.0+ GHz;
     o оперативная память: 4+ GB (рекомендуется 8+ GB для продакшн-среды);
     o дисковое пространство: 10+ GB (SSD рекомендуется для повышения производительности);
     o сетевой адаптер: 100+ Мбит/с;
     o резервное питание (ИБП) для предотвращения потери данных при сбоях электроснабжения.
   - программное окружение:
     o ОС: Windows 10/11 или Linux (Ubuntu 20.04+, CentOS 8+);
     o Python 3.8+ с виртуальным окружением;
     o Django 4.0+ для работы основного фреймворка;
     o pandas 1.3.0+ для обработки табличных данных;
     o xlsxwriter 3.0.0+ для формирования отчетов Excel;
     o openpyxl 3.0.0+ для импорта и анализа данных Excel;
     o SQLite 3 для хранения данных (с возможностью миграции на PostgreSQL/MySQL при масштабировании).
   - требования к сетевой инфраструктуре:
     o статический IP-адрес для серверной части;
     o настроенные порты для HTTP/HTTPS (80/443);
     o DNS-запись для доступа по доменному имени;
     o защита межсетевым экраном (firewall).

2)	Клиентская часть:
   - аппаратные требования:
     o процессор: 1+ ГГц;
     o оперативная память: 2+ GB;
     o дисковое пространство: 500+ MB для кэширования данных;
     o разрешение экрана: минимум 1366×768 (рекомендуется 1920×1080 и выше).
   - программное обеспечение:
     o современный веб-браузер (Chrome 90+, Firefox 90+, Edge 90+, Safari 14+);
     o поддержка JavaScript и cookies;
     o поддержка HTML5 и CSS3.
   - требования к сети:
     o подключение к интернету или локальной сети со скоростью 5+ Мбит/с;
     o стабильный канал передачи данных с низкой задержкой для работы с объемными данными.
   - дополнительное ПО:
     o Microsoft Excel или аналог для работы с экспортированными данными;
     o PDF-просмотрщик для ознакомления с документацией.
  
1.2.7	Требования к программной совместимости
 
1)	Серверные технологии:
   - язык программирования: Python;
   - фреймворк: Django;
   - СУБД: SQLite.
2)	Клиентские технологии:
   - HTML5, CSS3, JavaScript;
   - Bootstrap 5.
3)	Форматы данных:
   - JSON для обмена данными;
   - XML для интеграции;
   - Excel для экспорта/импорта.
  
1.2.8	Техническая документация
1)	Архитектурные решения:
   - описание структуры проекта;
   - схемы взаимодействия компонентов;
   - документация API.
2)	Руководство администратора:
   - инструкции по установке и настройке;
   - управление пользователями;
   - резервное копирование данных.
  
1.2.9	Пользовательская документация
1)	Руководство пользователя:
   - работа с номенклатурой;
   - управление ЛСИ;
   - экспорт и импорт данных.
2)	Справочная система:
   - интегрированные подсказки;
   - ответы на часто задаваемые вопросы.
 
1.2.10	Эксплуатационная документация
 
1)	Регламенты работы:
   - порядок обновления системы;
   - процедуры резервного копирования;
   - обслуживание базы данных.
2)	Методики тестирования:
   - проверка основных функций;
   - валидация входных данных;
   - тестирование интеграции.
  
1.3	Обоснование выбора средств реализации программной системы

1.3.1	Анализ требований к системе
Для системы управления номенклатурой требовалось решение, обеспечивающее:
   - быструю разработку и внедрение;
   - удобный веб-интерфейс;
   - работу с базами данных;
   - возможность экспорта и импорта данных;
   - интеграцию с другими системами через API.
  
1.3.2	Серверная архитектура системы
1)	Серверная часть реализована на Django по следующим причинам:
   - высокая производительность и безопасность;
   - встроенная ORM для работы с базами данных;
   - готовая система аутентификации и авторизации;
   - масштабируемость и модульная структура.
2)	Использование Python обеспечивает:
   - быструю разработку благодаря простому синтаксису;
   - доступ к библиотекам для работы с данными (pandas, xlsxwriter);
   - кроссплатформенную совместимость;
   - простоту поддержки и расширения.
  
1.3.3	Система хранения данных
1)	Критерии выбора СУБД:
   - простота использования и обслуживания;
   - нативная поддержка Django;
   - возможность быстрого развертывания.
2)	Выбор SQLite обусловлен:
   - отсутствием необходимости настраивать отдельный сервер;
   - высокой производительностью для небольших и средних проектов;
   - возможностью легкого перехода на более мощные СУБД при необходимости.
  
1.3.4	Взаимодействие компонентов системы
1)	Схема обмена данными:
   - пользователь взаимодействует с системой через веб-интерфейс;
   - Django обрабатывает запросы и работает с БД;
   - данные передаются во внешние системы через API.
2)	Безопасность передачи данных:
   - аутентификация через логин и пароль;
   - защита от XSS и CSRF атак;
   - валидация входных данных.
  
1.3.5	Дополнительные технологии
1)	Инструменты разработки:
   - Bootstrap 5 для адаптивного интерфейса;
   - pandas для обработки данных;
   - xlsxwriter и openpyxl для работы с Excel.
  
2.	Разработка программного продукта 
2.1	Разработка структуры данных
2.1.1	Модель данных и принципы проектирования
Система ATOM использует две основные модели данных для управления номенклатурой и логической структурой изделий. Модели спроектированы с учетом требований предметной области и обеспечивают эффективное хранение и обработку информации.
 
2.1.2	Таблица номенклатуры изделий
Поле	Тип данных	Описание
uuid	VARCHAR(36)	Уникальный идентификатор
spk_nomenclature_type	VARCHAR(100)	СПК_ВидНоменклатуры
abbreviation	VARCHAR(100)	Аббревиатура
effective_date	DATETIME	Дата введения в действие
internal_code	VARCHAR(100)	Код внутренний
ekps_code	VARCHAR(100)	Код ЕКПС
kvt_code	VARCHAR(100)	Код КВТ
checksum	VARCHAR(255)	Контрольная сумма записи
short_name	VARCHAR(255)	Наименование краткое
full_name	VARCHAR(255)	Наименование полное
deletion_mark	BOOLEAN	Пометка удаления
archived	BOOLEAN	Признак архивной записи
classifier_unique_code	VARCHAR(100)	Уникальный код классификатора
drawing_number	VARCHAR(100)	Чертежный номер
cipher	VARCHAR(100)	Шифр

2.1.3	Таблица логической структуры изделий (ЛСИ)
Поле	Тип данных	Описание
cipher	VARCHAR(100)	Шифр
uuid	VARCHAR(36)	Уникальный идентификатор
specialty	VARCHAR(255)	Специальность
group_indicator	BOOLEAN	Признак группы
deletion_mark	BOOLEAN	Пометка удаления
position_in_staff_structure_type	VARCHAR(255)	Позиция в штатной структуре типа
drawing_number	VARCHAR(255)	Номер чертежа
position_name	VARCHAR(255)	Наименование позиции
lkn	VARCHAR(255)	ЛКН
quantity	INTEGER	Количество
object_type_code	VARCHAR(36)	Код типа объекта
position_code	VARCHAR(255)	Код позиции
modification_code	VARCHAR(255)	Код модификации
code_5	VARCHAR(255)	Код 5
code_4	VARCHAR(255)	Код 4
code_3	VARCHAR(255)	Код 3
code_2	VARCHAR(255)	Код 2
code_1	VARCHAR(255)	Код 1
parent_record_id	VARCHAR(255)	Идентификатор родительской записи
dns	VARCHAR(255)	DNS
 
2.2	Схема алгоритма основной программы
Основной алгоритм работы системы включает:
1) Аутентификацию пользователя
2) Доступ к функциям в зависимости от прав пользователя
3) Работу с номенклатурой и ЛСИ
4) Экспорт/импорт данных
5) Интеграцию с внешними системами
 
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
Федеральный закон от 27.07.2006 № 149ФЗ «Об информации, информационных технологиях и защите информации» (с изменениями и дополнениями).
Django документация [Электронный ресурс]. — Режим доступа: https://docs.djangoproject.com/ (дата обращения: 20.03.2025).
Мэтиз Эрик. Изучаем Python. Программирование игр, визуализация данных, веб-приложения. — СПб.: Питер, 2021.
Пэмб Френсис. Django: Разработка веб-приложений. — М.: ДМК Пресс, 2022.
Советов Б.Я., Цехановский В.В. Базы данных: теория и практика. — М.: Юрайт, 2022.
Документация Bootstrap 5 [Электронный ресурс]. — Режим доступа: https://getbootstrap.com/docs/5.0/ (дата обращения: 20.03.2025).
Петров А.А. Современные подходы к проектированию веб-приложений // Программирование и IT. — 2023. — № 2. — С. 28–35.
Документация pandas [Электронный ресурс]. — Режим доступа: https://pandas.pydata.org/docs/ (дата обращения: 20.03.2025).
Руководство по SQLite. — SQLite, 2022.
Документация Python 3 [Электронный ресурс]. — Режим доступа: https://docs.python.org/3/ (дата обращения: 20.03.2025).

